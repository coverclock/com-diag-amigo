diff -purN -x .svn -x '*.hex' /home/jsloan/src/arduino-1.0-linux/hardware/arduino/bootloaders/stk500v2/Makefile hardware/arduino/bootloaders/stk500v2/Makefile
--- /home/jsloan/src/arduino-1.0-linux/hardware/arduino/bootloaders/stk500v2/Makefile	2011-11-28 17:56:32.000000000 -0700
+++ hardware/arduino/bootloaders/stk500v2/Makefile	2012-05-16 13:12:28.342266632 -0600
@@ -124,7 +124,7 @@ CINCS =
 CFLAGS = -g$(DEBUG)
 CFLAGS += $(CDEFS) $(CINCS)
 CFLAGS += -O$(OPT)
-CFLAGS += -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -mno-tablejump 
+CFLAGS += -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums -fno-jump-tables # 2012-05-16 coverclock@diag.com -mno-tablejump 
 CFLAGS += -Wall -Wstrict-prototypes
 CFLAGS += -Wa,-adhlns=$(<:.c=.lst)
 CFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))
diff -purN -x .svn -x '*.hex' /home/jsloan/src/arduino-1.0-linux/hardware/arduino/bootloaders/stk500v2/avrinterruptnames.h hardware/arduino/bootloaders/stk500v2/avrinterruptnames.h
--- /home/jsloan/src/arduino-1.0-linux/hardware/arduino/bootloaders/stk500v2/avrinterruptnames.h	2011-11-28 17:56:32.000000000 -0700
+++ hardware/arduino/bootloaders/stk500v2/avrinterruptnames.h	2012-05-16 13:22:06.217081068 -0600
@@ -31,239 +31,239 @@
 	#define	PGM_P		char *
 #endif
 
-	prog_char	gAvrInt_RESET[]			PROGMEM	=	"RESET";
+	char	gAvrInt_RESET[]			PROGMEM	=	"RESET";
 #ifdef INT0_vect
-	prog_char	gAvrInt_INT0[]			PROGMEM	=	"INT0";
+	char	gAvrInt_INT0[]			PROGMEM	=	"INT0";
 #endif
 #ifdef INT1_vect
-	prog_char	gAvrInt_INT1[]			PROGMEM	=	"INT1";
+	char	gAvrInt_INT1[]			PROGMEM	=	"INT1";
 #endif
 #ifdef INT2_vect
-	prog_char	gAvrInt_INT2[]			PROGMEM	=	"INT2";
+	char	gAvrInt_INT2[]			PROGMEM	=	"INT2";
 #endif
 #ifdef INT3_vect
-	prog_char	gAvrInt_INT3[]			PROGMEM	=	"INT3";
+	char	gAvrInt_INT3[]			PROGMEM	=	"INT3";
 #endif
 #ifdef INT4_vect
-	prog_char	gAvrInt_INT4[]			PROGMEM	=	"INT4";
+	char	gAvrInt_INT4[]			PROGMEM	=	"INT4";
 #endif
 #ifdef INT5_vect
-	prog_char	gAvrInt_INT5[]			PROGMEM	=	"INT5";
+	char	gAvrInt_INT5[]			PROGMEM	=	"INT5";
 #endif
 #ifdef INT6_vect
-	prog_char	gAvrInt_INT6[]			PROGMEM	=	"INT6";
+	char	gAvrInt_INT6[]			PROGMEM	=	"INT6";
 #endif
 #ifdef INT7_vect
-	prog_char	gAvrInt_INT7[]			PROGMEM	=	"INT7";
+	char	gAvrInt_INT7[]			PROGMEM	=	"INT7";
 #endif
 #ifdef PCINT0_vect
-	prog_char	gAvrInt_PCINT0[]		PROGMEM	=	"PCINT0";
+	char	gAvrInt_PCINT0[]		PROGMEM	=	"PCINT0";
 #endif
 #ifdef PCINT1_vect
-	prog_char	gAvrInt_PCINT1[]		PROGMEM	=	"PCINT1";
+	char	gAvrInt_PCINT1[]		PROGMEM	=	"PCINT1";
 #endif
 #ifdef PCINT2_vect
-	prog_char	gAvrInt_PCINT2[]		PROGMEM	=	"PCINT2";
+	char	gAvrInt_PCINT2[]		PROGMEM	=	"PCINT2";
 #endif
 #ifdef PCINT3_vect
-	prog_char	gAvrInt_PCINT3[]		PROGMEM	=	"PCINT3";
+	char	gAvrInt_PCINT3[]		PROGMEM	=	"PCINT3";
 #endif
 #ifdef WDT_vect
-	prog_char	gAvrInt_WDT[]			PROGMEM	=	"WDT";
+	char	gAvrInt_WDT[]			PROGMEM	=	"WDT";
 #endif
 #ifdef TIMER0_COMP_vect
-	prog_char	gAvrInt_TIMER0_COMP[]	PROGMEM	=	"TIMER0 COMP";
+	char	gAvrInt_TIMER0_COMP[]	PROGMEM	=	"TIMER0 COMP";
 #endif
 #ifdef TIMER0_COMPA_vect
-	prog_char	gAvrInt_TIMER0_COMPA[]	PROGMEM	=	"TIMER0 COMPA";
+	char	gAvrInt_TIMER0_COMPA[]	PROGMEM	=	"TIMER0 COMPA";
 #endif
 #ifdef TIMER0_COMPB_vect
-	prog_char	gAvrInt_TIMER0_COMPB[]	PROGMEM	=	"TIMER0 COMPB";
+	char	gAvrInt_TIMER0_COMPB[]	PROGMEM	=	"TIMER0 COMPB";
 #endif
 #ifdef TIMER0_OVF_vect
-	prog_char	gAvrInt_TIMER0_OVF[]	PROGMEM	=	"TIMER0 OVF";
+	char	gAvrInt_TIMER0_OVF[]	PROGMEM	=	"TIMER0 OVF";
 #endif
 #ifdef TIMER1_CAPT_vect
-	prog_char	gAvrInt_TIMER1_CAPT[]	PROGMEM	=	"TIMER1 CAPT";
+	char	gAvrInt_TIMER1_CAPT[]	PROGMEM	=	"TIMER1 CAPT";
 #endif
 #ifdef TIMER1_COMPA_vect
-	prog_char	gAvrInt_TIMER1_COMPA[]	PROGMEM	=	"TIMER1 COMPA";
+	char	gAvrInt_TIMER1_COMPA[]	PROGMEM	=	"TIMER1 COMPA";
 #endif
 #ifdef TIMER1_COMPB_vect
-	prog_char	gAvrInt_TIMER1_COMPB[]	PROGMEM	=	"TIMER1 COMPB";
+	char	gAvrInt_TIMER1_COMPB[]	PROGMEM	=	"TIMER1 COMPB";
 #endif
 #ifdef TIMER1_COMPC_vect
-	prog_char	gAvrInt_TIMER1_COMPC[]	PROGMEM	=	"TIMER1 COMPC";
+	char	gAvrInt_TIMER1_COMPC[]	PROGMEM	=	"TIMER1 COMPC";
 #endif
 #ifdef TIMER1_OVF_vect
-	prog_char	gAvrInt_TIMER1_OVF[]	PROGMEM	=	"TIMER1 OVF";
+	char	gAvrInt_TIMER1_OVF[]	PROGMEM	=	"TIMER1 OVF";
 #endif
 #ifdef TIMER2_COMP_vect
-	prog_char	gAvrInt_TIMER2_COMP[]	PROGMEM	=	"TIMER2 COMP";
+	char	gAvrInt_TIMER2_COMP[]	PROGMEM	=	"TIMER2 COMP";
 #endif
 #ifdef TIMER2_COMPA_vect
-	prog_char	gAvrInt_TIMER2_COMPA[]	PROGMEM	=	"TIMER2 COMPA";
+	char	gAvrInt_TIMER2_COMPA[]	PROGMEM	=	"TIMER2 COMPA";
 #endif
 #ifdef TIMER2_COMPB_vect
-	prog_char	gAvrInt_TIMER2_COMPB[]	PROGMEM	=	"TIMER2 COMPB";
+	char	gAvrInt_TIMER2_COMPB[]	PROGMEM	=	"TIMER2 COMPB";
 #endif
 #ifdef TIMER2_OVF_vect
-	prog_char	gAvrInt_TIMER2_OVF[]	PROGMEM	=	"TIMER2 OVF";
+	char	gAvrInt_TIMER2_OVF[]	PROGMEM	=	"TIMER2 OVF";
 #endif
 #ifdef TIMER3_CAPT_vect
-	prog_char	gAvrInt_TIMER3_CAPT[]	PROGMEM	=	"TIMER3 CAPT";
+	char	gAvrInt_TIMER3_CAPT[]	PROGMEM	=	"TIMER3 CAPT";
 #endif
 #ifdef TIMER3_COMPA_vect
-	prog_char	gAvrInt_TIMER3_COMPA[]	PROGMEM	=	"TIMER3 COMPA";
+	char	gAvrInt_TIMER3_COMPA[]	PROGMEM	=	"TIMER3 COMPA";
 #endif
 #ifdef TIMER3_COMPB_vect
-	prog_char	gAvrInt_TIMER3_COMPB[]	PROGMEM	=	"TIMER3 COMPB";
+	char	gAvrInt_TIMER3_COMPB[]	PROGMEM	=	"TIMER3 COMPB";
 #endif
 #ifdef TIMER3_COMPC_vect
-	prog_char	gAvrInt_TIMER3_COMPC[]	PROGMEM	=	"TIMER3 COMPC";
+	char	gAvrInt_TIMER3_COMPC[]	PROGMEM	=	"TIMER3 COMPC";
 #endif
 #ifdef TIMER3_OVF_vect
-	prog_char	gAvrInt_TIMER3_OVF[]	PROGMEM	=	"TIMER3 OVF";
+	char	gAvrInt_TIMER3_OVF[]	PROGMEM	=	"TIMER3 OVF";
 #endif
 #ifdef TIMER4_CAPT_vect
-	prog_char	gAvrInt_TIMER4_CAPT[]	PROGMEM	=	"TIMER4 CAPT";
+	char	gAvrInt_TIMER4_CAPT[]	PROGMEM	=	"TIMER4 CAPT";
 #endif
 #ifdef TIMER4_COMPA_vect
-	prog_char	gAvrInt_TIMER4_COMPA[]	PROGMEM	=	"TIMER4 COMPA";
+	char	gAvrInt_TIMER4_COMPA[]	PROGMEM	=	"TIMER4 COMPA";
 #endif
 #ifdef TIMER4_COMPB_vect
-	prog_char	gAvrInt_TIMER4_COMPB[]	PROGMEM	=	"TIMER4 COMPB";
+	char	gAvrInt_TIMER4_COMPB[]	PROGMEM	=	"TIMER4 COMPB";
 #endif
 #ifdef TIMER4_COMPC_vect
-	prog_char	gAvrInt_TIMER4_COMPC[]	PROGMEM	=	"TIMER4 COMPC";
+	char	gAvrInt_TIMER4_COMPC[]	PROGMEM	=	"TIMER4 COMPC";
 #endif
 #ifdef TIMER4_COMPD_vect
-	prog_char	gAvrInt_TIMER4_COMPD[]	PROGMEM	=	"TIMER4 COMPD";
+	char	gAvrInt_TIMER4_COMPD[]	PROGMEM	=	"TIMER4 COMPD";
 #endif
 #ifdef TIMER4_OVF_vect
-	prog_char	gAvrInt_TIMER4_OVF[]	PROGMEM	=	"TIMER4 OVF";
+	char	gAvrInt_TIMER4_OVF[]	PROGMEM	=	"TIMER4 OVF";
 #endif
 #ifdef TIMER4_FPF_vect
-	prog_char	gAvrInt_TIMER4_FPF[]	PROGMEM	=	"TIMER4 Fault Protection";
+	char	gAvrInt_TIMER4_FPF[]	PROGMEM	=	"TIMER4 Fault Protection";
 #endif
 #ifdef TIMER5_CAPT_vect
-	prog_char	gAvrInt_TIMER5_CAPT[]	PROGMEM	=	"TIMER5 CAPT";
+	char	gAvrInt_TIMER5_CAPT[]	PROGMEM	=	"TIMER5 CAPT";
 #endif
 #ifdef TIMER5_COMPA_vect
-	prog_char	gAvrInt_TIMER5_COMPA[]	PROGMEM	=	"TIMER5 COMPA";
+	char	gAvrInt_TIMER5_COMPA[]	PROGMEM	=	"TIMER5 COMPA";
 #endif
 #ifdef TIMER5_COMPB_vect
-	prog_char	gAvrInt_TIMER5_COMPB[]	PROGMEM	=	"TIMER5 COMPB";
+	char	gAvrInt_TIMER5_COMPB[]	PROGMEM	=	"TIMER5 COMPB";
 #endif
 #ifdef TIMER5_COMPC_vect
-	prog_char	gAvrInt_TIMER5_COMPC[]	PROGMEM	=	"TIMER5 COMPC";
+	char	gAvrInt_TIMER5_COMPC[]	PROGMEM	=	"TIMER5 COMPC";
 #endif
 #ifdef TIMER5_OVF_vect
-	prog_char	gAvrInt_TIMER5_OVF[]	PROGMEM	=	"TIMER5 OVF";
+	char	gAvrInt_TIMER5_OVF[]	PROGMEM	=	"TIMER5 OVF";
 #endif
 
 //*	when there is only 1 usart
 #if defined(USART_RX_vect) || defined(USART_RXC_vect)
-	prog_char	gAvrInt_USART_RX[]		PROGMEM	=	"USART RX";
+	char	gAvrInt_USART_RX[]		PROGMEM	=	"USART RX";
 #endif
 #if defined(USART_UDRE_vect)
-	prog_char	gAvrInt_USART_UDRE[]	PROGMEM	=	"USART UDRE";
+	char	gAvrInt_USART_UDRE[]	PROGMEM	=	"USART UDRE";
 #endif
 #if defined(USART_TX_vect) || defined(USART_TXC_vect)
-	prog_char	gAvrInt_USART_TX[]		PROGMEM	=	"USART TX";
+	char	gAvrInt_USART_TX[]		PROGMEM	=	"USART TX";
 #endif
 
 
 //*	usart 0
 #if defined(USART0_RX_vect)
-	prog_char	gAvrInt_USART0_RX[]		PROGMEM	=	"USART0 RX";
+	char	gAvrInt_USART0_RX[]		PROGMEM	=	"USART0 RX";
 #endif
 #if defined(USART0_UDRE_vect)
-	prog_char	gAvrInt_USART0_UDRE[]	PROGMEM	=	"USART0 UDRE";
+	char	gAvrInt_USART0_UDRE[]	PROGMEM	=	"USART0 UDRE";
 #endif
 #if defined(USART0_TX_vect)
-	prog_char	gAvrInt_USART0_TX[]		PROGMEM	=	"USART0 TX";
+	char	gAvrInt_USART0_TX[]		PROGMEM	=	"USART0 TX";
 #endif
 
 
 //*	usart 1
 #ifdef USART1_RX_vect
-	prog_char	gAvrInt_USART1_RX[]		PROGMEM	=	"USART1 RX";
+	char	gAvrInt_USART1_RX[]		PROGMEM	=	"USART1 RX";
 #endif
 #ifdef USART1_UDRE_vect
-	prog_char	gAvrInt_USART1_UDRE[]	PROGMEM	=	"USART1 UDRE";
+	char	gAvrInt_USART1_UDRE[]	PROGMEM	=	"USART1 UDRE";
 #endif
 #ifdef USART1_TX_vect
-	prog_char	gAvrInt_USART1_TX[]		PROGMEM	=	"USART1 TX";
+	char	gAvrInt_USART1_TX[]		PROGMEM	=	"USART1 TX";
 #endif
 
 //*	usart 2
 #ifdef USART2_RX_vect
-	prog_char	gAvrInt_USART2_RX[]		PROGMEM	=	"USART2 RX";
+	char	gAvrInt_USART2_RX[]		PROGMEM	=	"USART2 RX";
 #endif
 #ifdef USART2_UDRE_vect
-	prog_char	gAvrInt_USART2_UDRE[]	PROGMEM	=	"USART2 UDRE";
+	char	gAvrInt_USART2_UDRE[]	PROGMEM	=	"USART2 UDRE";
 #endif
 #ifdef USART2_TX_vect
-	prog_char	gAvrInt_USART2_TX[]		PROGMEM	=	"USART2 TX";
+	char	gAvrInt_USART2_TX[]		PROGMEM	=	"USART2 TX";
 #endif
 
 //*	usart 3
 #ifdef USART3_RX_vect
-	prog_char	gAvrInt_USART3_RX[]		PROGMEM	=	"USART3 RX";
+	char	gAvrInt_USART3_RX[]		PROGMEM	=	"USART3 RX";
 #endif
 #ifdef USART3_UDRE_vect
-	prog_char	gAvrInt_USART3_UDRE[]	PROGMEM	=	"USART3 UDRE";
+	char	gAvrInt_USART3_UDRE[]	PROGMEM	=	"USART3 UDRE";
 #endif
 #ifdef USART3_TX_vect
-	prog_char	gAvrInt_USART3_TX[]		PROGMEM	=	"USART3 TX";
+	char	gAvrInt_USART3_TX[]		PROGMEM	=	"USART3 TX";
 #endif
 #ifdef SPI_STC_vect
-	prog_char	gAvrInt_SPI_STC[]		PROGMEM	=	"SPI STC";
+	char	gAvrInt_SPI_STC[]		PROGMEM	=	"SPI STC";
 #endif
 #ifdef ADC_vect
-	prog_char	gAvrInt_ADC[]			PROGMEM	=	"ADC";
+	char	gAvrInt_ADC[]			PROGMEM	=	"ADC";
 #endif
 #if defined(ANALOG_COMP_vect) || defined(ANA_COMP_vect)
-	prog_char	gAvrInt_ANALOG_COMP[]	PROGMEM	=	"ANALOG COMP";
+	char	gAvrInt_ANALOG_COMP[]	PROGMEM	=	"ANALOG COMP";
 #endif
 #if defined(EE_READY_vect) || defined(EE_RDY_vect)
-	prog_char	gAvrInt_EE_READY[]		PROGMEM	=	"EE READY";
+	char	gAvrInt_EE_READY[]		PROGMEM	=	"EE READY";
 #endif
 #ifdef TWI_vect
-	prog_char	gAvrInt_TWI[]			PROGMEM	=	"TWI";
+	char	gAvrInt_TWI[]			PROGMEM	=	"TWI";
 #endif
 #if defined(SPM_READY_vect) || defined(SPM_RDY_vect)
-	prog_char	gAvrInt_SPM_READY[]		PROGMEM	=	"SPM READY";
+	char	gAvrInt_SPM_READY[]		PROGMEM	=	"SPM READY";
 #endif
 #ifdef USI_START_vect
-	prog_char	gAvrInt_USI_START[]		PROGMEM	=	"USI START";
+	char	gAvrInt_USI_START[]		PROGMEM	=	"USI START";
 #endif
 #ifdef USI_OVERFLOW_vect
-	prog_char	gAvrInt_USI_OVERFLOW[]	PROGMEM	=	"USI OVERFLOW";
+	char	gAvrInt_USI_OVERFLOW[]	PROGMEM	=	"USI OVERFLOW";
 #endif
 #ifdef USB_GEN_vect
-	prog_char	gAvrInt_USB_General[]	PROGMEM	=	"USB General";
+	char	gAvrInt_USB_General[]	PROGMEM	=	"USB General";
 #endif
 #ifdef USB_COM_vect
-	prog_char	gAvrInt_USB_Endpoint[]	PROGMEM	=	"USB Endpoint";
+	char	gAvrInt_USB_Endpoint[]	PROGMEM	=	"USB Endpoint";
 #endif
 
 #ifdef LCD_vect
-	prog_char	gAvrInt_LCD_StartFrame[]	PROGMEM	=	"LCD Start of Frame";
+	char	gAvrInt_LCD_StartFrame[]	PROGMEM	=	"LCD Start of Frame";
 #endif
 
 
 //**************************************************************************************************
 //*	these do not have vector defs and have to be done by CPU type
 #if defined(__AVR_ATmega645__ ) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2561__)
-	prog_char	gAvrInt_NOT_USED[]		PROGMEM	=	"NOT_USED";
+	char	gAvrInt_NOT_USED[]		PROGMEM	=	"NOT_USED";
 #endif
 #if defined(__AVR_ATmega32U4__)
-	prog_char	gAvrInt_RESERVED[]		PROGMEM	=	"Reserved";
+	char	gAvrInt_RESERVED[]		PROGMEM	=	"Reserved";
 #endif
 
-	prog_char	gAvrInt_END[]			PROGMEM	=	"*";
+	char	gAvrInt_END[]			PROGMEM	=	"*";
 
 
 
@@ -739,4 +739,4 @@ PGM_P gInterruptNameTable[]	PROGMEM =
 
 #if !defined(_INTERRUPT_NAMES_DEFINED_)
 	#warning	No interrupt string defs for this cpu
-#endif
\ No newline at end of file
+#endif
diff -purN -x .svn -x '*.hex' /home/jsloan/src/arduino-1.0-linux/hardware/arduino/bootloaders/stk500v2/stk500boot.c hardware/arduino/bootloaders/stk500v2/stk500boot.c
--- /home/jsloan/src/arduino-1.0-linux/hardware/arduino/bootloaders/stk500v2/stk500boot.c	2011-11-28 17:56:31.000000000 -0700
+++ hardware/arduino/bootloaders/stk500v2/stk500boot.c	2012-05-16 13:51:20.962267078 -0600
@@ -95,6 +95,15 @@ LICENSE:
 #include	"command.h"
 
 
+// v coverclock@diag.com 2012-05-16
+#if defined(__AVR_ATmega2560__)
+#	include <avr/wdt.h>
+	void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));
+	void wdt_init(void) { wdt_reset(); MCUSR = 0; wdt_disable(); return; }
+#endif
+// ^ coverclock@diag.com 2012-05-16
+
+
 #if defined(_MEGA_BOARD_) || defined(_BOARD_AMBER128_) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)
 	#define		ENABLE_MONITOR
 	static void	RunMonitor(void);
@@ -1078,57 +1087,57 @@ unsigned long	gEepromIndex;
 void	PrintDecInt(int theNumber, int digitCnt);
 
 #ifdef kCPU_NAME
-	prog_char	gTextMsg_CPU_Name[]			PROGMEM	=	kCPU_NAME;
+	char	gTextMsg_CPU_Name[]			PROGMEM	=	kCPU_NAME;
 #else
-	prog_char	gTextMsg_CPU_Name[]			PROGMEM	=	"UNKNOWN";
+	char	gTextMsg_CPU_Name[]			PROGMEM	=	"UNKNOWN";
 #endif
 
-	prog_char	gTextMsg_Explorer[]			PROGMEM	=	"Arduino explorer stk500V2 by MLS";
-	prog_char	gTextMsg_Prompt[]			PROGMEM	=	"Bootloader>";
-	prog_char	gTextMsg_HUH[]				PROGMEM	=	"Huh?";
-	prog_char	gTextMsg_COMPILED_ON[]		PROGMEM	=	"Compiled on  = ";
-	prog_char	gTextMsg_CPU_Type[]			PROGMEM	=	"CPU Type     = ";
-	prog_char	gTextMsg_AVR_ARCH[]			PROGMEM	=	"__AVR_ARCH__ = ";
-	prog_char	gTextMsg_AVR_LIBC[]			PROGMEM	=	"AVR LibC Ver = ";
-	prog_char	gTextMsg_GCC_VERSION[]		PROGMEM	=	"GCC Version  = ";
-	prog_char	gTextMsg_CPU_SIGNATURE[]	PROGMEM	=	"CPU signature= ";
-	prog_char	gTextMsg_FUSE_BYTE_LOW[]	PROGMEM	=	"Low fuse     = ";
-	prog_char	gTextMsg_FUSE_BYTE_HIGH[]	PROGMEM	=	"High fuse    = ";
-	prog_char	gTextMsg_FUSE_BYTE_EXT[]	PROGMEM	=	"Ext fuse     = ";
-	prog_char	gTextMsg_FUSE_BYTE_LOCK[]	PROGMEM	=	"Lock fuse    = ";
-	prog_char	gTextMsg_GCC_DATE_STR[]		PROGMEM	=	__DATE__;
-	prog_char	gTextMsg_AVR_LIBC_VER_STR[]	PROGMEM	=	__AVR_LIBC_VERSION_STRING__;
-	prog_char	gTextMsg_GCC_VERSION_STR[]	PROGMEM	=	__VERSION__;
-	prog_char	gTextMsg_VECTOR_HEADER[]	PROGMEM	=	"V#   ADDR   op code     instruction addr   Interrupt";
-	prog_char	gTextMsg_noVector[]			PROGMEM	=	"no vector";
-	prog_char	gTextMsg_rjmp[]				PROGMEM	=	"rjmp  ";
-	prog_char	gTextMsg_jmp[]				PROGMEM	=	"jmp ";
-	prog_char	gTextMsg_WHAT_PORT[]		PROGMEM	=	"What port:";
-	prog_char	gTextMsg_PortNotSupported[]	PROGMEM	=	"Port not supported";
-	prog_char	gTextMsg_MustBeLetter[]		PROGMEM	=	"Must be a letter";
-	prog_char	gTextMsg_SPACE[]			PROGMEM	=	" ";
-	prog_char	gTextMsg_WriteToEEprom[]	PROGMEM	=	"Writting EE";
-	prog_char	gTextMsg_ReadingEEprom[]	PROGMEM	=	"Reading EE";
-	prog_char	gTextMsg_EEPROMerrorCnt[]	PROGMEM	=	"eeprom error count=";
-	prog_char	gTextMsg_PORT[]				PROGMEM	=	"PORT";
+	char	gTextMsg_Explorer[]			PROGMEM	=	"Arduino explorer stk500V2 by MLS";
+	char	gTextMsg_Prompt[]			PROGMEM	=	"Bootloader>";
+	char	gTextMsg_HUH[]				PROGMEM	=	"Huh?";
+	char	gTextMsg_COMPILED_ON[]		PROGMEM	=	"Compiled on  = ";
+	char	gTextMsg_CPU_Type[]			PROGMEM	=	"CPU Type     = ";
+	char	gTextMsg_AVR_ARCH[]			PROGMEM	=	"__AVR_ARCH__ = ";
+	char	gTextMsg_AVR_LIBC[]			PROGMEM	=	"AVR LibC Ver = ";
+	char	gTextMsg_GCC_VERSION[]		PROGMEM	=	"GCC Version  = ";
+	char	gTextMsg_CPU_SIGNATURE[]	PROGMEM	=	"CPU signature= ";
+	char	gTextMsg_FUSE_BYTE_LOW[]	PROGMEM	=	"Low fuse     = ";
+	char	gTextMsg_FUSE_BYTE_HIGH[]	PROGMEM	=	"High fuse    = ";
+	char	gTextMsg_FUSE_BYTE_EXT[]	PROGMEM	=	"Ext fuse     = ";
+	char	gTextMsg_FUSE_BYTE_LOCK[]	PROGMEM	=	"Lock fuse    = ";
+	char	gTextMsg_GCC_DATE_STR[]		PROGMEM	=	__DATE__;
+	char	gTextMsg_AVR_LIBC_VER_STR[]	PROGMEM	=	__AVR_LIBC_VERSION_STRING__;
+	char	gTextMsg_GCC_VERSION_STR[]	PROGMEM	=	__VERSION__;
+	char	gTextMsg_VECTOR_HEADER[]	PROGMEM	=	"V#   ADDR   op code     instruction addr   Interrupt";
+	char	gTextMsg_noVector[]			PROGMEM	=	"no vector";
+	char	gTextMsg_rjmp[]				PROGMEM	=	"rjmp  ";
+	char	gTextMsg_jmp[]				PROGMEM	=	"jmp ";
+	char	gTextMsg_WHAT_PORT[]		PROGMEM	=	"What port:";
+	char	gTextMsg_PortNotSupported[]	PROGMEM	=	"Port not supported";
+	char	gTextMsg_MustBeLetter[]		PROGMEM	=	"Must be a letter";
+	char	gTextMsg_SPACE[]			PROGMEM	=	" ";
+	char	gTextMsg_WriteToEEprom[]	PROGMEM	=	"Writting EE";
+	char	gTextMsg_ReadingEEprom[]	PROGMEM	=	"Reading EE";
+	char	gTextMsg_EEPROMerrorCnt[]	PROGMEM	=	"eeprom error count=";
+	char	gTextMsg_PORT[]				PROGMEM	=	"PORT";
 
 
 //************************************************************************
 //*	Help messages
-	prog_char	gTextMsg_HELP_MSG_0[]		PROGMEM	=	"0=Zero address ctrs";
-	prog_char	gTextMsg_HELP_MSG_QM[]		PROGMEM	=	"?=CPU stats";
-	prog_char	gTextMsg_HELP_MSG_AT[]		PROGMEM	=	"@=EEPROM test";
-	prog_char	gTextMsg_HELP_MSG_B[]		PROGMEM	=	"B=Blink LED";
-	prog_char	gTextMsg_HELP_MSG_E[]		PROGMEM	=	"E=Dump EEPROM";
-	prog_char	gTextMsg_HELP_MSG_F[]		PROGMEM	=	"F=Dump FLASH";
-	prog_char	gTextMsg_HELP_MSG_H[]		PROGMEM	=	"H=Help";
-	prog_char	gTextMsg_HELP_MSG_L[]		PROGMEM	=	"L=List I/O Ports";
-	prog_char	gTextMsg_HELP_MSG_Q[]		PROGMEM	=	"Q=Quit & jump to user pgm";
-	prog_char	gTextMsg_HELP_MSG_R[]		PROGMEM	=	"R=Dump RAM";
-	prog_char	gTextMsg_HELP_MSG_V[]		PROGMEM	=	"V=show interrupt Vectors";
-	prog_char	gTextMsg_HELP_MSG_Y[]		PROGMEM	=	"Y=Port blink";
+	char	gTextMsg_HELP_MSG_0[]		PROGMEM	=	"0=Zero address ctrs";
+	char	gTextMsg_HELP_MSG_QM[]		PROGMEM	=	"?=CPU stats";
+	char	gTextMsg_HELP_MSG_AT[]		PROGMEM	=	"@=EEPROM test";
+	char	gTextMsg_HELP_MSG_B[]		PROGMEM	=	"B=Blink LED";
+	char	gTextMsg_HELP_MSG_E[]		PROGMEM	=	"E=Dump EEPROM";
+	char	gTextMsg_HELP_MSG_F[]		PROGMEM	=	"F=Dump FLASH";
+	char	gTextMsg_HELP_MSG_H[]		PROGMEM	=	"H=Help";
+	char	gTextMsg_HELP_MSG_L[]		PROGMEM	=	"L=List I/O Ports";
+	char	gTextMsg_HELP_MSG_Q[]		PROGMEM	=	"Q=Quit & jump to user pgm";
+	char	gTextMsg_HELP_MSG_R[]		PROGMEM	=	"R=Dump RAM";
+	char	gTextMsg_HELP_MSG_V[]		PROGMEM	=	"V=show interrupt Vectors";
+	char	gTextMsg_HELP_MSG_Y[]		PROGMEM	=	"Y=Port blink";
 
-	prog_char	gTextMsg_END[]				PROGMEM	=	"*";
+	char	gTextMsg_END[]				PROGMEM	=	"*";
 
 
 //************************************************************************
